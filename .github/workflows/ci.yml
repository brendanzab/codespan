name: ci

on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master

jobs:
  check:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        rust: ["1.67.0", "stable", "beta", "nightly"]
    name: Check (${{ matrix.rust }})
    steps:
      - uses: actions/checkout@v2
      - name: Install minimal ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      # Check each crate individually to work around rust-lang/cargo#4942
      - name: Run cargo check for codespan-reporting
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --manifest-path "codespan-reporting/Cargo.toml" --features "serialization"
      - name: Run cargo check for codespan
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --manifest-path "codespan/Cargo.toml" --features "serialization"
      - name: Run cargo check for codespan-lsp
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --manifest-path "codespan-lsp/Cargo.toml"
      - name: Switch to minimal lsp-types version for codespan-lsp
        uses: actions-rs/cargo@v1
        with:
          command: update
          # NOTE: Keep up to date with the minimum version of `lsp-types`
          # specified in `codespan-lsp/Cargo.toml`
          args: --precise 0.84.0 -p lsp-types
      - name: Run cargo test for codespan-lsp
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --manifest-path "codespan-lsp/Cargo.toml"

  check-no-std:
    name: Check
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust: 
          - "1.84.0"
          - "stable"
          - "beta"
          - "nightly"
        target:
          - "x86_64-unknown-none"
          - "wasm32v1-none"
          - "thumbv6m-none-eabi"
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}
      - name: Run cargo check for codespan-reporting
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --manifest-path "codespan-reporting/Cargo.toml" --no-default-features --features "serialization" --target ${{ matrix.target }}
      - name: Run cargo check for codespan
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --manifest-path "codespan/Cargo.toml" --no-default-features --features "serialization" --target ${{ matrix.target }}

  test:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        rust: ["1.67.0", "stable", "beta", "nightly"]
      fail-fast: false
    name: Test Suite (${{ matrix.rust }})
    steps:
      - uses: actions/checkout@v2
      - name: Install minimal ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      # Test each crate individually to work around rust-lang/cargo#4942
      - name: Run cargo test for codespan-reporting
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path "codespan-reporting/Cargo.toml" --features "serialization"
      - name: Run cargo test for codespan
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path "codespan/Cargo.toml" --features "serialization"
      - name: Switch to minimal lsp-types version for codespan-lsp
        uses: actions-rs/cargo@v1
        with:
          command: update
          # NOTE: Keep up to date with the minimum version of `lsp-types`
          # specified in `codespan-lsp/Cargo.toml`
          args: --precise 0.84.0 lsp-types
      - name: Run cargo test for codespan-lsp
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path "codespan-lsp/Cargo.toml"

  fmt:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        rust: ["1.67.0", "stable", "beta", "nightly"]
      fail-fast: false
    name: Rustfmt (${{ matrix.rust }})
    steps:
      - uses: actions/checkout@v2
      - name: Install minimal ${{ matrix.rust }} with rustfmt
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt
      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  lint:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        rust: ["stable"]
      fail-fast: false
    name: Rustfmt (${{ matrix.rust }})
    steps:
      - uses: actions/checkout@v2
      - name: Install minimal ${{ matrix.rust }} with rustfmt
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt
      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all
