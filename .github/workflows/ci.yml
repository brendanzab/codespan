name: ci

on:
  push: { 'branches': [master] }
  pull_request: { 'branches': ["*"] }

jobs:
  check:
    name: Check ${{ matrix.rust }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: ["stable", "nightly"] # "1.67.0",

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      # TODO features here

      - name: Run cargo check for codespan
        run: cargo check --manifest-path "codespan/Cargo.toml" --features "serialization"

      - name: Run cargo check for codespan-reporting
        run: cargo check --manifest-path "codespan-reporting/Cargo.toml" --features "serialization"
      
      - name: Run cargo check for codespan-lsp
        run: cargo check --manifest-path "codespan-lsp/Cargo.toml"
      
  check-no-std:
    needs: check

    name: Check no_std ${{ matrix.rust }} / ${{ matrix.target }}

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        rust: ["stable", "nightly"]
        target: ["x86_64-unknown-none", "wasm32v1-none", "thumbv6m-none-eabi"]

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}
      
      - name: Run cargo check for codespan-reporting
        run: cargo check --manifest-path "codespan-reporting/Cargo.toml" --no-default-features --features "serialization" --target ${{ matrix.target }}
      
      - name: Run cargo check for codespan
        run: cargo check --manifest-path "codespan/Cargo.toml" --no-default-features --features "serialization" --target ${{ matrix.target }}

  test:
    needs: check

    name: Test Suite (${{ matrix.rust }})

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        rust: ["stable", "nightly"]

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with: { 'toolchain': '${{ matrix.rust }}' }
          
      # Test each crate individually to work around rust-lang/cargo#4942
      - name: Run cargo test for codespan-reporting
        run: cargo test --manifest-path "codespan-reporting/Cargo.toml" --features "serialization"

      - name: Run cargo test for codespan
        run: cargo test --manifest-path "codespan/Cargo.toml" --features "serialization"

      - name: Run cargo test for codespan-lsp
        run: cargo test --manifest-path "codespan-lsp/Cargo.toml"

  fmt:
    name: rustfmt

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - name: Run cargo fmt
        run: cargo fmt --all -- --check

      - uses: kaleidawave/release-downloader@improvements
        with: { 'items': 'kaleidawave/simple-toml-parser@canary[format]' }

      - name: Check 'Cargo.toml' formatting
        run: format cargo --check

  lint:
    needs: check

    name: clippy (${{ matrix.rust }})

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        rust: ["stable"]

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with: { 'toolchain': '${{ matrix.rust }}' }

      - name: Run cargo clippy
        run: cargo clippy --all
